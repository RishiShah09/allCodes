def main():
    choice = input("Enter 1 for single player and 2 for multi player: ")
    choice = int(choice)
    board = [0, 0, 0, 0, 0, 0, 0, 0, 0]
    
    if choice == 1:
        print("Computer is O and player is X")
        player = input("Enter 1 to play first or 2 to play second: ")
        player = int(player)
        
        for i in range(9):
            if analyzeboard(board) != 0:
                break
            if (i + player) % 2 == 0:
                compTurn(board)
            else:
                ConstBoard(board)
                User1Turn(board)
    else:
        for i in range(9):
            if analyzeboard(board) != 0:
                break
            if i % 2 == 0:
                ConstBoard(board)
                User1Turn(board)
            else:
                ConstBoard(board)
                User2Turn(board)
    
    x = analyzeboard(board)
    ConstBoard(board)
    if x == 0:
        print("Draw!!")
    elif x == -1:
        print("Player X wins and O loses")
    elif x == 1:
        print("Player X loses and O wins")

def ConstBoard(board):
    print("Current state of the board is:\n")
    for i in range(9):
        if i > 0 and i % 3 == 0:
            print("\n")
        if board[i] == 0:
            print("_", end=" ")
        elif board[i] == -1:
            print("X", end=" ")
        elif board[i] == 1:
            print("O", end=" ")
    print("\n")

def User1Turn(board):
    pos = input("Enter X's position from 1 to 9: ")
    pos = int(pos)
    if board[pos - 1] != 0:
        print("Wrong move")
        exit(0)
    board[pos - 1] = -1

def User2Turn(board):
    pos = input("Enter O's position from 1 to 9: ")
    pos = int(pos)
    if board[pos - 1] != 0:
        print("Wrong move")
        exit(0)
    board[pos - 1] = 1

def analyzeboard(board):
    cb = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
    for i in range(8):
        if board[cb[i][0]] != 0 and board[cb[i][0]] == board[cb[i][1]] == board[cb[i][2]]:
            return board[cb[i][0]]
    return 0

def minmax(board, player):
    x = analyzeboard(board)
    if x != 0:
        return x * player
    pos = -1
    value = -2
    for i in range(9):
        if board[i] == 0:
            board[i] = player
            score = -minmax(board, player * -1)
            board[i] = 0
            if score > value:
                value = score
                pos = i
    if pos == -1:
        return 0
    return value

def compTurn(board):
    pos = -1
    value = -2
    for i in range(9):
        if board[i] == 0:
            board[i] = 1  # Computer is 'O', represented by 1
            score = -minmax(board, -1)
            board[i] = 0
            if score > value:
                value = score
                pos = i
    if pos != -1:
        board[pos] = 1

if __name__ == "__main__":
    main()

